const scriptName = "DS"
const name_num = { '강라엘': ['19-001'], '강승욱': ['19-002'], '강찬우': ['19-003'], '곽지민': ['19-004'], '권순용': ['19-005'], '권순호': ['19-006'], '권형준': ['19-007'], '김규택': ['19-008'], '김다은': ['19-009'], '김대철': ['19-010'], '김도현': ['19-011'], '김동욱': ['19-012'], '김무겸': ['19-013'], '김문수': ['19-014'], '김문정': ['19-015'], '김민준': ['19-016', '21-018'], '김선우': ['19-017', '20-018'], '김수민': ['19-018'], '김승우': ['19-019'], '김영진': ['19-020'], '김웅비': ['19-021'], '김유신': ['19-023'], '김의인': ['19-024'], '김재원': ['19-025'], '김재형': ['19-026'], '김준모': ['19-027'], '김준영': ['19-028'], '김준현': ['19-029'], '김준희': ['19-030'], '김진욱': ['19-031'], '김현진': ['19-032'], '나경민': ['19-033'], '문강연': ['19-034'], '문지환': ['19-035'], '박기찬': ['19-036'], '박명원': ['19-037'], '박민성': ['19-038'], '박선빈': ['19-039'], '박수용': ['19-040'], '박승빈': ['19-041'], '박용원': ['19-042'], '박재환': ['19-043'], '박주원': ['19-044'], '박준혁': ['19-045', '19-046', '20-044'], '박채진': ['19-047'], '배진규': ['19-048'], '백승민': ['19-049'], '변유원': ['19-050'], '서해린': ['19-051'], '설규민': ['19-052'], '신민영': ['19-053'], '신민준': ['19-054'], '신재원': ['19-055'], '양건': ['19-056'], '여승현': ['19-057'], '예상우': ['19-058'], '유호진': ['19-059'], '윤강현': ['19-060'], '윤준서': ['19-061', '19-062'], '은다훈': ['19-063'], '이근영': ['19-064'], '이동건': ['19-065'], '이동현': ['19-066'], '이석진': ['19-067'], '이승찬': ['19-068'], '이유담': ['19-069'], '이윤지': ['19-070'], '이은우': ['19-071'], '이재원': ['19-072'], '이정민': ['19-073', '20-084'], '이종우': ['19-074'], '이주영': ['19-075'], '이준민': ['19-076'], '이준하': ['19-077'], '이준형': ['19-078'], '이지원': ['19-079', '19-080'], '이지형': ['19-081'], '이진원': ['19-082'], '이찬용': ['19-083'], '이창하': ['19-084'], '이채민': ['19-085'], '이채원': ['19-086'], '이혜라': ['19-087'], '이혜범': ['19-088'], '이호성': ['19-089'], '장성필': ['19-090'], '장제홍': ['19-091'], '장준화': ['19-092'], '장현준': ['19-093'], '전소현': ['19-094'], '전지민': ['19-095'], '전형준': ['19-096'], '정의택': ['19-097'], '정인환': ['19-098'], '정재윤': ['19-099', '20-102'], '정진': ['19-100'], '조민석': ['19-101'], '조준수': ['19-102'], '조하현': ['19-103'], '조현준': ['19-104', '20-111', '21-104'], '주현수': ['19-105'], '천준성': ['19-106'], '천현재': ['19-107'], '최경영': ['19-108'], '최은수': ['19-109'], '최인식': ['19-110'], '최현준': ['19-111'], '추연서': ['19-112'], '편승민': ['19-113'], '하상효': ['19-114'], '한상희': ['19-115'], '한윤기': ['19-116'], '한형원': ['19-117'], '허성준': ['19-118'], '홍석범': ['19-119'], '홍원기': ['19-120'], '홍준기': ['19-121'], '황대희': ['19-122'], '황승찬': ['19-123'], '황제욱': ['19-124'], 'Anis': ['19-201'], 'Biruk': ['19-202'], 'Esha': ['19-203'], 'Himani': ['19-204'], 'JohannaAureliaThio': ['19-206'], 'Kiannah': ['19-207'], 'Mandy': ['19-208'], 'Safa': ['19-209'], 'DangThaiNamSon': ['19-210'], 'Monmon': ['19-211'], 'Yang': ['19-212'], '강민준': ['20-001'], '강성민': ['20-002'], '강현준': ['20-003'], '경규한': ['20-004'], '고건': ['20-005'], '고건희': ['20-006'], '김경민': ['20-007'], '김규리': ['20-008'], '김다연': ['20-009'], '김대경': ['20-010'], '김동은': ['20-011'], '김동인': ['20-012'], '김동하': ['20-013'], '김민성': ['20-014'], '김민우': ['20-015', '21-017'], '김민재': ['20-016'], '김병권': ['20-017'], '김소윤': ['20-019'], '김시현': ['20-020'], '김영재': ['20-021'], '김영주': ['20-022'], '김정호': ['20-023'], '김준형': ['20-024'], '김지윤': ['20-025'], '김지환': ['20-026', '20-027'], '김태현': ['20-028'], '김태훈': ['20-029'], '김해인': ['20-030'], '김현기': ['20-031'], '김현욱': ['20-032'], '나승균': ['20-033'], '문시우': ['20-034'], '박기윤': ['20-035'], '박상현': ['20-036', '21-038'], '박서준': ['20-037'], '박승민': ['20-038'], '박승완': ['20-039'], '박영신': ['20-040'], '박우진': ['20-041'], '박정우': ['20-042'], '박정훈': ['20-043', '21-044'], '박준호': ['20-045'], '박지훈': ['20-046'], '박찬영': ['20-047'], '박태빈': ['20-048'], '박현수': ['20-049'], '박형준': ['20-050'], '방동효': ['20-051'], '방민솔': ['20-052'], '백종진': ['20-053'], '서지완': ['20-054'], '서형우': ['20-055'], '석인호': ['20-056'], '선승호': ['20-057'], '손세범': ['20-058'], '손승민': ['20-059'], '손예국': ['20-060'], '송기원': ['20-061'], '송우혁': ['20-062'], '신연재': ['20-063'], '신재헌': ['20-064'], '심승현': ['20-065'], '안태경': ['20-066'], '양선우': ['20-067'], '양시형': ['20-068'], '양태빈': ['20-069'], '어재혁': ['20-070'], '오정민': ['20-071'], '유현동': ['20-072'], '윤서경': ['20-073'], '윤성욱': ['20-074'], '윤홍민': ['20-075'], '이동재': ['20-076'], '이민기': ['20-077'], '이상화': ['20-078'], '이동훈': ['20-079'], '이서현': ['20-080'], '이승욱': ['20-081'], '이예진': ['20-082'], '이재훈': ['20-083'], '이준성': ['20-085'], '이진우': ['20-086'], '이태현': ['20-087'], '이현규': ['20-088'], '이휘우': ['20-089'], '임서하': ['20-090'], '임재영': ['20-091'], '임한이': ['20-092'], '임해찬': ['20-093'], '장지함': ['20-094'], '전건욱': ['20-095'], '전재원': ['20-096'], '전진협': ['20-097'], '정민재': ['20-098'], '정민준': ['20-099'], '정선영': ['20-100'], '정자윤': ['20-101'], '정제윤': ['20-103'], '정종민': ['20-104'], '정준우': ['20-105'], '정현우': ['20-106'], '조민지': ['20-107'], '조수영': ['20-108'], '조영서': ['20-109'], '조용빈': ['20-110', '21-102'], '주민규': ['20-112'], '진은재': ['20-113'], '최가영': ['20-114'], '최백령': ['20-115'], '최서형': ['20-116'], '최석현': ['20-117'], '최성민': ['20-118'], '최이안': ['20-119'], '한승우': ['20-120'], '허현욱': ['20-121'], '홍서현': ['20-122'], 'AizhanSadykova': ['20-201'], 'AllanurBayramgeldiyev': ['20-202'], 'AshwinThapa': ['20-203'], 'AzamatRashidov': ['20-204'], 'FrancisErluphBarroCabanting': ['20-205'], 'Macharia': ['20-206'], 'iderchuluun': ['20-207'], 'JanBreyEspia': ['20-208'], 'Phuong': ['20-209'], 'NazarNovruzov': ['20-210'], 'Quang': ['20-211'], 'TsoggerelTsogbadrakh': ['20-212'], 'YernarAmanbek': ['20-213'], '강다영': ['21-001'], '강진욱': ['21-002'], '공지민': ['21-003'], '공태현': ['21-004'], '구본준': ['21-005'], '국태영': ['21-006'], '권승주': ['21-007'], '권아현': ['21-008'], '권태완': ['21-009'], '김근표': ['21-010'], '김기민': ['21-011'], '김도형': ['21-012'], '김동건': ['21-013'], '김동언': ['21-014'], '김동현': ['21-015'], '김문엽': ['21-016'], '김민찬': ['21-019', '21-020'], '김보겸': ['21-021'], '김승기': ['21-022'], '김아리': ['21-023'], '김예린': ['21-024'], '김유성': ['21-025'], '김정우': ['21-026'], '김정윤': ['21-027'], '김준호': ['21-028'], '김지원': ['21-029'], '김진홍': ['21-030'], '김태완': ['21-031'], '김현우': ['21-032'], '김형섭': ['21-033'], '맹연재': ['21-034'], '민지홍': ['21-035'], '박건': ['21-036'], '박무혁': ['21-037'], '박세훈': ['21-039'], '박승범': ['21-040'], '박예서': ['21-041'], '박윤홍': ['21-042'], '박재희': ['21-043'], '박종혁': ['21-045'], '박진우': ['21-046'], '박찬': ['21-047'], '박하늘': ['21-048'], '박현교': ['21-049'], '박현우': ['21-050'], '백동주': ['21-051'], '변희승': ['21-052'], '서준빈': ['21-053'], '서지민': ['21-054'], '서채원': ['21-055'], '손지환': ['21-056'], '신예준': ['21-057'], '신희상': ['21-058'], '심규서': ['21-059'], '안선홍': ['21-060'], '양승민': ['21-061', '21-062'], '양의석': ['21-063'], '양희수': ['21-064'], '오민준': ['21-065'], '원동현': ['21-066'], '유병우': ['21-067'], '유은수': ['21-068'], '윤준식': ['21-069'], '이경민': ['21-070'], '이병렬': ['21-071'], '이승윤': ['21-072'], '이영환': ['21-073'], '이예찬': ['21-074'], '이윤상': ['21-075'], '이의성': ['21-076'], '이재환': ['21-077'], '이종석': ['21-078'], '이종현': ['21-079'], '이준영': ['21-080'], '이진규': ['21-081'], '이진하': ['21-082'], '이찬민': ['21-083'], '이찬호': ['21-084'], '이청문': ['21-085'], '이현민': ['21-086'], '이현승': ['21-087'], '이호범': ['21-088'], '임예찬': ['21-089'], '임원준': ['21-090'], '임정빈': ['21-091'], '정선우': ['21-092'], '정세영': ['21-093'], '정은우': ['21-094'], '정재훈': ['21-095'], '정준영': ['21-096'], '정지훈': ['21-097'], '정채운': ['21-098'], '정휘라': ['21-099'], '제승규': ['21-100'], '조승원': ['21-101'], '조웅래': ['21-103'], '주성우': ['21-105'], '주시현': ['21-106'], '주하나': ['21-107'], '진현우': ['21-108'], '최석준': ['21-109'], '최선재': ['21-110'], '최성혁': ['21-111'], '최우석': ['21-112'], '최원석': ['21-113'], '한태윤': ['21-114'], '함재욱': ['21-115'], '허승우': ['21-116'], '허준혁': ['21-117'], '홍석준': ['21-118'], '홍성민': ['21-119'], '홍승우': ['21-120'], '홍지우': ['21-121'], '홍채영': ['21-122'], '황동우': ['21-123'], '황성진': ['21-124'], 'Duy': ['21-202'], 'HazetaRahmaniWafda': ['21-203'], 'JoshuaManojMathews': ['21-204'], 'Kidist': ['21-205'], 'SơnNghiêmXuân': ['21-208'], 'TanishqTarate': ['21-210'], 'TogzhanTyshkanbayeva': ['21-211'], 'TrishaMayeSantillan': ['21-212'], 'ZafiraPuanAdelin': ['21-213'] }
const EASEGG = { '가렌': ['내 검과 심장은 데마시아의 것이다!', '두려움이 가장 큰 적이다!'], '갈리오': ['힘을 발휘할 시간이군!', '다시 잠이나 자야겠군.'], '갱플랭크': ['지옥의 불길도, 죽음의 심연도, 이 몸을 넘볼 수는 없다.', '더 강해져서 돌아오마.'], '그웬': ['자신 있게! 어깨 펴고, 가위 들고!', '왜 안 돼? 내 가위는 안 문다니까.'], '나서스': ['삶과 죽음의 순환은 계속된다. 우리는 살 것이고, 저들은 죽을 것이다.', '내 인내심을 시험하려 들지 마시오.'], '노틸러스': ['물이 깊으니... 조심해...', '난 쉬지 않아.'], '녹턴': ['어둠을… 맞이하라…!', '어둠이… 두려운가?'], '누누와 윌럼프': ['모험은 역시 친구랑 같이 해야 신나는 법! [윌럼프] [웃음]', '괜찮아, 다음에 놀지 뭐!'], '니코': ['니코? 정말 멋진 선택이야!', '니코를 감당하지 못하는군.'], '다리우스': ['오직 나만이 승리로 이끌 수 있다.', '도망쳐라, 약해빠진 놈들!'], '드레이븐': ['드레이븐의 리그에 오신 걸 환영한다.', '난 이만~'], '라이즈': ['대재앙에 한발 앞서가는 거다!', '하... 그래! 지금 간다고!'], '라칸': ['한 번 신나게 춰볼까?', '진심이야? 진심이냐고! 아놔!'], '럭스': ['어디 한번 길을 밝혀보죠!', '이런, 제가 분위기 좀 밝혀드릴 수 있었는데...'], '럼블': ['자, 한번 붙어 보자고!', '좋아, 간다!'], '레넥톤': ['내가 살아있는 한, 모두 죽는다!', '혼돈이 따를 것이다!'], '레오나': ['새벽이 밝았습니다!', '황혼이 저뭅니다!'], '렐': ['아무도 받아들이지 않겠어. 누구도 빠져나갈 수 없을 테니까.', '약해빠져서는!'], '루시안': ['결국 모두 죽기 마련. 내가 좀 거들어주지.', '그럴 만한 용기가 없어 보이는군.'], '리 신': ['당신의 뜻대로, 싸우겠소.', '그럼, 다시 수련에 정진하겠소.'], '리븐': ['부러진 건, 다시 붙이면 돼.', '뒤돌아보지 않겠어.'], '릴리아': ['정말? 날? 꿈이 이루어졌어!', '지금, 내가 무서워서 도망치는 거야?'], '마스터 이': ['나의 검은 당신의 것이오.', '흠... 알겠소.'], '마오카이': ['군도의 빛을 되찾으리라!', '어떤 선택을 하든, 심판을 피할 수는 없을 거다.'], '모데카이저': ['운명, 지배, 그리고 기만.', '날 피할 순 없다.'], '모르가나': ['날개를 묶었다고 의지까지 꺾인 건 아니야.', '꿈에서도 이 선택을 후회하게 될 거다.'], '문도 박사': ['아~ 문도 박사~ 납신다!', '문도! 취소 수수료 받을 거다.'], '미스 포츈': ['행운은 멍청이를 싫어하는 법이지.', '문제 없어.'], '바이': ['일단 한 대 맞아. 질문은 나중에 하고.', '네 생각이 듣고 싶었으면 때려서 알아냈겠지.'], '베이가': ['내가 너였다면, 너에게 어떤 자비도 없었을 거란 것만 알아 둬!', '네 마음속에 공포가 보이는군.'], '베인': ['어둠에 빠진 자들을 사냥해 볼까?', '불경한 멍청이들.'], '볼리베어': ['야생의 힘이다!', '그렇게 겁이 많아서야.'], '브라움': ['가장! 듬직한 심장이 되어드리지.', '자네, 신중하게 생각하라고.'], '블라디미르': ['강이 핏빛으로 물들 것이다.', '피를 말리는군.'], '블리츠크랭크': ['시스템 가동. 준비 완료.', '뼈는 형편없는 부품이다.'], '비에고': ['사랑 뒤엔 몰락뿐.', '내 심장은 무너져내린 지 오래.'], '뽀삐': ['영웅이라뇨, 전 그저 망치를 든 요들일 뿐이에요.', '용기나는 바지를 집에 두고 오셨나 봐요. 그럼 잠깐 기다려 줄까요?'], '사미라': ['스타일을 찾는 거야? 여기 있잖아!', '뭐, 나도 별로.'], '사이온': ['휴식은… 산 자를 위한... 것이다...!', '공포에 찌든 냄새가 난다!'], '사일러스': ['해방이다!', '날 영원히 가둘 순 없을 거다!'], '세나': ['검은 안개를 홀로 상대하지 마.', '좋아! 나도 더 이상 적은 필요 없어.'], '세라핀': ['세상을 바꿔보는 거야!', '그래, 알았어.'], '세주아니': ['네가 가진 힘, 믿을 건 오직 그뿐이야!', '겁쟁이 냄새가 나지? 어때, 브리슬? 가서 먹어치워!'], '세트': ['난, 최강이다.', '그래. 이길 수 없는 싸움은 거는 게 아니야.'], '소나': ['오늘은 어떤 명작을 연주해볼까요?', '[소나가 에트왈을 거친 소리가 나게 내려친다.]'], '': ['', ''], '소라카': ['내 숨이 붙어있는 한 고통받게 두진 않아요.', '가슴 속에 미움이 가득하군요.'], '쉔': ['훌륭한 판단의 표본이로군.', '상대할 가치도 없군.'], '스웨인': ['네가 못 보는 힘. 그것이 진짜 공포다.', '그건 현명한 게 아니다. 비겁함일 뿐.'], '스카너': ['내 꼬리에 걸리면 곱게 죽진 못하지!', '때를 기다리지.'], '시비르': ['내 건 내가 알아서 챙겨. 목숨이든, 돈이든.', '난 사람 따윈 믿지 않아.'], '쓰레쉬': ['어떤 고통을 선사해 줄까?', '내가 끝이라고 해야 끝인 거다.'], '아리': ['우리 같이... 홀려볼까요?', '장난은 끝났어.'], '아우렐리온 솔': ['당연하지.', '이런, 이건 비극이야.'], '아우솔': ['당연하지.', '이런, 이건 비극이야.'], '아이번': ['내가 좋아하는 색은 봄! 봄빛이지.', '내 기꺼이 잘 쉬겠네.'], '아지르': ['슈리마여, 너의 황제가 돌아왔다!', '저들은 왜 저항하는가?'], '아칼리': ['경외하라. 난 섬기는 이 없는 암살자다.', '그래, 겁이 나겠지.'], '아트록스': ['고요한 종말에 귀가 멀게 해 주마.', '종말을 내려주마.'], '아펠리오스': ['아펠리오스, 가장 강력한 무기는 바로 네 신념이야.', '어둠 속으로 내몰렸을 때 더욱 강해지는 법.'], '애니비아': ['내 날개를 타고.', '난 버틸 수 있어요.'], '애쉬': ['화살 한 발로 세상을 평정해 주지.', '겁쟁이, 명예로운 죽음이 허락되지 않으리라!'], '야스오': ['죽음은 바람과 같지. 늘 내 곁에 있으니.', '멍청한 덴 약도 없지.'], '에코': ['시간이 얼마나 있는진 상관 없어. 어떻게 쓰느냐가 중요하지.', '맘대로 해, 되감으면 되니까.'], '엘리스': ['거미줄에선 거미만 안전하지.', '약해빠진 멍청이들.'], '오른': ['알았네. 간다고, 가.', '그럼 난 대장간에 있겠네~'], '요네': ['하나로 베고, 다른 하나로 봉인하리.', '지금, 내가 두렵다는 건가?'], '요릭': ['두려워 마라. 네 시체는, 잘 써 주마.', '오늘이 네 제삿날이다.'], '우디르': ['네놈 따위는 우리의 분노를 막을 수 없다!', '그들이 겁먹는 건 당연하지.'], '우르곳': ['부러져 봐야...얼마나 강한지 알 수 있지.', '희망에 매달려라... 남은 건 그뿐일 테니.'], '워윅': ['피비린내다! 도망쳐라...', '두렵나...? 그럴 수밖에...'], '유미': ['너랑 유미랑! 우리 함께 잘 해보자고!', '고양이보단 개라 이거지?'], '이렐리아': ['최초의 땅, 아이오니아를 위하여!', '폭군이군!'], '이블린': ['날 원하잖아, 그렇지?', '여자를 그렇게 함부로 대하면 쓰나.'], '이즈리얼': ['임무를 수락하지! 잠깐, 어디 가는 거라고?', '너만 손해지 뭐! 이해는 해.'], '일라오이': ['설교는 필요 없다. 부러진 뼈가 더 큰 교훈을 새겨 줄 테니.', '두려움 따윌 안고 살기엔 인생은 너무 짧다!'], '자야': ['댄스 파티에 내가 빠질 수는 없지.', '그래, 여기 남아 있을게. 내 깃털의 날을 세우면서 말이야.'], '잔나': ['바람의 힘을 마음껏 부리세요!', '원하신다면요.'], '제드': ['보이지 않는 검이 가장 무서운 법.', '날 부정하지 마.'], '제라스': ['난... 해방될 것이다!', '누구도 나를 조종할 순 없다.'], '조이': ['야호! 재밌겠다. 그치?', '세상에! 이런 법이 어딨어!'], '진': ['학살의 현장에서 난, 피어오른다. 붉은 여명에 피어나는... 꽃처럼.', '언젠간, 나의 천재성을 이해할 날이... 올 거다.'], '징크스': ['하핫! 신나게 놀아볼까?', '하암~ 점점 지루해지는데?'], '초가스': ['세계의 종말을 원한다고…? 좋아...', '빈 손으로 왔다... 빈 손으로 가는구나...'], '카르마': ['항상 정신을 집중하세요.', '우린 반드시 결정을 내려야 합니다.'], '카밀': ['정교함이 없다면 망나니일 뿐.', '그래! 실력 좀 더 키우고 오라고.'], '카서스': ['고통, 희열, 그리고 평화...죽음은 언제나 아름답다.', '지금 내 노트에 네 이름을 적고 있다.'], '카시오페아': ['날 막을 해독제는 없을 걸?', '내가 뭘 줄 수 있을지 생각해봐.'], '카이사': ['사냥꾼이냐,사냥감이냐?', '하, 공허에선 단 하루도 못 버틸 녀석이군.'], '카타리나': ['폭력은 모든 것을 해결해 주지.', '설마 두려운 건가?'], '칼리스타': ['배신자에겐, 죽음뿐.', '우린 믿었었다.'], '케이틀린': ['이 사건은 내가 맡죠.', '좋아요.'], '케인': ['네 능력을 입증해 볼 테냐? 내가 왜?', '약자는 그림자를 두려워하지. 공포에 사로잡혔구나.'], '케일': ['모두가 내 전능함을 경외하리라.', '사리분별이 안 되나 보군?'], '퀸': ['정의의 날개로.', '나 같으면 고개도 못 들고 있을 텐데.'], '클레드': ['용기? 그런 게 왜 필요해? 광기! 그래, 그게 진짜지!', '이런 스칼 콧구멍 같은 겁쟁이들!'], '키아나': ['너도 내 진가를 알게 되겠군!', '그래. 당연히 내가 두렵겠지.'], '킨드레드': ['함께가 아니면, 아무것도 아니다.', '도망치든가, 맞서든가, 결과는 똑같다!'], '타릭': ['희망의 빛이 보이십니까? 그게 바로 접니다.', '판단력이 흐려지셨군요. 영롱함이 필요할 때입니다.'], '탈리야': ['마법의 베틀로, 바위를 엮어내리라.', '날 묶어두겠다고?'], '탐 켙치': ['', ''], '탐 켄치': ['왕이든 폭군이든 마음대로 불러라. 강물은, 망자의 이름까지 기억해주진 않으니까.', '흠, 오늘은 메뉴가 영 별로군.'], '트런들': ['트롤 한 판 해볼까?', '딱한 녀석들!'], '트리스타나': ['일단 한 번 쏘고 나면, 또 쏘고 싶을 거에요!', '잠시 후퇴!'], '트린다미어': ['손쉬운 사냥이 되겠군!', '원한다면.'], '트위스티드 페이트': ['행운의 여신이, 내게 미소를 짓는군.', '그럼, 가 드려야지.'], '트위치': ['죽거나 죽이거나. 약육강식은 그런 거지!', '무슨 꿍꿍이가 있는 게 분명해!'], '티모': ['티모 대위, 명을 받들겠습니다!', '옛 썰!'], '파이크': ['모두 빠뜨려주마...', '살생부에 또 한 놈 올라왔군.'], '판테온': ['전쟁에서 우린, 다시 태어난다!', '아무리 도망쳐도 내 창을 피할 순 없다!'], '피들스틱': ['공포...', '두려운가...'], '피오라': ['겨뤄볼 만한 상대... 어디 없나?', '난 물러서지 않아.'], '하이머딩거': ['정말 현명한 선택이에요!', '뭘 어쩌시겠다고요?!'], '그라가스': ['네가 사는 거라면 나도 끼지~', '어, 그래 그래.'], '그레이브즈': ['내가 돌아왔다.', '골치 아프구만.'], '나르': ['나르, 갸다!', '슈 슈 파나(다,바)! 헤헤헷.'], '나미': ['파도가 뭘 싣고 올진 나한테 달렸죠.', '제 길은 제가 찾을게요.'], '니달리': ['야생을 두려워하게 만들어주지.', '음… 겁쟁이의 맛이 나는군.'], '다이애나': ['새로운 달이 떠오르고 있다.', '저들은 도통 듣지를 않아.'], '람머스': ['그래.', '그래.'], '렉사이': ['으르릉', '으르릉'], '렝가': ['오늘 밤! 사냥을 나선다...', '진정한 사냥꾼은 쉬는 법이 없지.'], '룰루': ['만나서 반갑습니다!', '깽깽이 발로 갈까요~'], '르블랑': ['검은 장미단은 다시 피어날 겁니다.', '확실한가요?'], '리산드라': ['이 세상을... 꽁꽁 얼려주지.', '이런 전투 따위. 흥, 난 이미 승자야.'], '말자하': ['종말이 기다린다!', '불가피하군.'], '말파이트': ['바위처럼 단단하게!', '넌, 진다.'], '바드': ['♪ ♪♩ ♬ ', '♪ ♪♩ ♬ '], '바루스': ['죄 지은 자, 고통받을지어다.', '고독하구나.'], '벨코즈': ['해체하여, 지식을 습득한다.', '예상 밖의 결과로군.'], '브랜드': ['세상을 불태울 준비는 되었나? 흐하하하하!', '가고 있어.'], '빅토르': ['영광스러운 진화에 동참하라!', '적응하지 못하면 멸종할 뿐!'], '샤코': ['마술 하나 보여줄까!', '다음 장난감은 너야!'], '쉬바나': ['나는 곧 내 적수의 공포이니라.', '겁쟁이 냄새가 나는데?'], '신 짜오': ['전장으로!', '지루하기 짝이 없군.'], '신드라': ['내 안에 무한한 힘이 넘친다!', '질투나 하는 멍청이들!'], '신지드': ['한잔 하겠나!', '가고 있다.'], '아무무': ['날 선택해줄 줄은 정말 몰랐어..', '알았어.'], '알리스타': ['누구도 날 막지 못해!', '나 지금 열 받았어!'], '애니': ['너도 같이 놀래? 재밌겠다~!', '어우~ 겁쟁이!'], '오공': ['내가 최고가 되겠어!', '누가 감히 내 능력을 의심하지?'], '오리아나': ['당신의 적을 죽이겠어요. 재미있겠네요.', '구체가 화가 났네요.'], '올라프': ['아무것도 남기지 않겠다!', '이리 와봐, 정말 안 아프게 해줄게. 내 약속하지.'], '자르반 4세': ['내 의지로, 여기서 끝을 보겠노라!', '감히 내 의지를 꺾으려는 자가 누구더냐!'], '자이라': ['가시덤불에 포근히 안겨봐.', '뻔한 길은 재미없지 않아?'], '자크': ['딱 봐도 잘 싸우게 생기지 않았어?', '이거 영 별론데...'], '잭스': ['자, 한번 해 보자고!', '안 돼, 이럴 순 없어!'], '제이스': ['나는 더 나은 미래를 위해 싸운다.', '뒤돌아보지 마.'], '직스': ['뻥~이요!', '아, 간다고 간다고!'], '질리언': ['그리 할 줄 알고 있었소.', '피할 수 없구려.'], '카사딘': ['힘의 균형은 유지되어야 한다!', '원한다면.'], '카직스': ['변화란 좋은 거야.', '내가 두렵지?'], '케넨': ['눈은 절대 거짓말을 하지 않지.', '그래 그래 그래!'], '코그모': ['만찬의 시간이다!', '배고픔이 그치지 않아!'], '코르키': ['상황 파악 끝! 최고의 전투기까지 있다구!', '가는 중이야, 애송이!'], '탈론': ['칼에 살고, 칼에 죽는다.', '한심하군.'], '피즈': ['내가 혼내줄게!', '흐름이 바뀌었다구!'], '헤카림': ['그림자 군도의 위력을 똑똑히 봐라!', '난 쉬지 않아.'] }
const week = ['일', '월', '화', '수', '목', '금', '토']
const gb = "\u200b".repeat(500)
var MentoringAD = "/sdcard/DataBase/Mentoring.json" //{name : name, mento : [mentos], menti : [mentis], code : number, audit : [], wantAudit : [], canAudit : string, schedule : [], scheduleAdded : {}, scheduleChanged : {}, absent : [], join : [], subscriber : []}
var MentoAD = "/sdcard/DataBase/Mento.json" //{name : name, oname : name, mentoring : [mentorings]}, addMentoring
var MentiAD = "/sdcard/DataBase/Menti.json" //{name : name, oname : name, mentoring : [mentorings], subscribe : [subscribes], attend : {mentoring : bool}, auditing : [auditings]}, addMentoring, subscribe, audit, viewSchedule, viewClass, viewClassmates, setAttend
var Mento, Menti, Mentoring, process = {}, ad = {}
var mto = {}, aut = {}, nam = {}, mtis = {}, idx = {}
function getOname(name, isMento) {
    Mento = JSON.parse(FileStream.read(MentoAD))
    Menti = JSON.parse(FileStream.read(MentiAD))
    if (isMento) {
        for (m in Mento) {
            if (Mento[m]['name'] == name) return Mento[m]['oname']
        }
    }
    else {
        for (m in Menti) {
            if (Menti[m]['name'] == name) return Menti[m]['oname']
        }
    }
    return -1
}
function getName(oname, isMento) {
    Mento = JSON.parse(FileStream.read(MentoAD))
    Menti = JSON.parse(FileStream.read(MentiAD))
    if (isMento) {
        for (m in Mento) {
            if (Mento[m]['oname'] == oname) return Mento[m]['name']
        }
    }
    else {
        for (m in Menti) {
            if (Menti[m]['oname'] == oname) return Menti[m]['name']
        }
    }
    return -1
}
function compareTime(time) {
    a = time[0].split(":")
    b = time[1].split(":")
    a[0] = parseInt(a[0]); a[1] = parseInt(a[1]); b[0] = parseInt(b[0]); b[1] = parseInt(b[1])
    if (a[0] < 1 || a[0] > 24 || a[1] < 0 || a[1] > 60 || b[0] < 1 || b[0] > 24 || b[1] < 0 || b[1] > 60) return 0
    if (a[0] < b[0] || (a[0] == b[0] && a[1] < b[1])) return 1
    return 0
}
function response(room, msg, sender, isGroupChat, replier, imageDB, packageName) {
    if (!isGroupChat) {
        if (msg == "RESET") {
            /*msg = msg.slice(6)
            switch (parseInt(msg)) {
                case 1:
                    FileStream.write(MentoAD, JSON.stringify([]))
                    break;.
                case 2:
                    FileStream.write(MentiAD, JSON.stringify([]))
                    break;
                case 3:
                    FileStream.write(MentoringAD, JSON.stringify([]))
                    break;
                case 4:
                    FileStream.write(MentoAD, JSON.stringify([]))
                    FileStream.write(MentiAD, JSON.stringify([]))
                    FileStream.write(MentoringAD, JSON.stringify([]))
                    break;
                default:
                    replier.reply("ERROR : " + msg)
                    return;
            }*/
            FileStream.write(MentoAD, JSON.stringify([]))
            FileStream.write(MentiAD, JSON.stringify([]))
            FileStream.write(MentoringAD, JSON.stringify([]))
            replier.reply("Complete")
            return
        }
        if (!(sender in process)) {
            if (msg == "취소") {
                replier.reply("진행중인 작업이 없습니다.")
                return
            }
            else if (msg == "도움말") {
                replier.reply("[도움말]" + gb + "\n간혹 이용자가 보낸 메시지가 인식되지 않거나 봇에서 메시지가 한 개씩 누락될 수 있어요! 메시지가 인식되지 않는다면 당황하지 말고 다시 입력해보세요! 오류가 생긴다면 20-011 김동은 혹은 20-056 석인호에게 연락 주세요. '취소'는 만능 명령어이니 오류가 났을 때 사용해보세요.\n\n[명령어 목록]\n도움말 : 명령어들의 도움말을 확인합니다.\n취소 : 진행중인 작업을 취소합니다.\n일정확인 : 등록되어있는 멘토링들의 일정을 일괄적으로 확인합니다.\n멘토정보 이름 : 멘토 '이름'의 정보를 확인합니다.\n멘티정보 이름 : 멘티 '이름'의 정보를 확인합니다.\n멘토링정보 코드 : '코드'를 코드로 가지는 멘토링의 정보를 확인합니다.\n멘토링 코드확인 : 멘토링 명단과 그 코드를 확인합니다.\n멘토등록 : 자신을 멘토로 등록합니다.\n멘티등록 : 자신을 멘티로 등록합니다.\n멘토링등록 : 새 멘토링을 등록합니다.\n멘토링참가 : 기존 멘토링에 참가 신청합니다.\n청강신청 : 기존 멘토링에 청강을 신청합니다.\n멘토링관리 : 멘토링을 관리합니다.\n구독 : 기존 멘토링을 구독합니다.")
            }
            else if (msg == "멘토목록" || msg == "멘토 목록") {
                Mento = JSON.parse(FileStream.read(MentoAD))
                var s = "[멘토목록]\n멘토링을 맡지 않은 멘토는 표시되지 않습니다." + gb + "\n"
                for (m in Mento) {
                    if (Mento[m]['mentoring'].length != 0) s += Mento[m]['oname'] + " : " + Mento[m]['mentoring'].join(",") + "\n"
                }
                replier.reply(s.slice(0, -1))
            }
            else if (msg.slice(0, 4) == "멘토정보") {
                Mento = JSON.parse(FileStream.read(MentoAD))
                Mentoring = JSON.parse(FileStream.read(MentoringAD))
                if (msg.length != 4 && msg.slice(4, 5) != " ") {
                    replier.reply("'멘토정보 이름'의 형식을 지켜 입력해주시기 바랍니다.")
                    return
                }
                msg = msg.slice(5)
                if (msg == "") {
                    msg = getOname(sender, true)
                    if (msg == -1) {
                        replier.reply("멘토로 등록되어있지 않습니다.")
                        return
                    }
                }
                else {
                    if (getName(msg, true) == -1) {
                        replier.reply(msg + "님은 멘토로 등록되어있지 않습니다.")
                        return
                    }
                }
                for (m in Mento) {
                    if (Mento[m]['oname'] == msg) {
                        var mm = Mento[m]
                        var s = "[정보]\n이름 : " + mm['oname'] + "\n맡은 멘토링 : "
                        for (mk in mm['mentoring']) {
                            for (mtk in Mentoring) {
                                if (Mentoring[mtk]['code'] == mm['mentoring'][mk]) {
                                    s += Mentoring[mtk]['name'] + ","
                                    break
                                }
                            }
                        }
                        replier.reply(s.slice(0, -1))
                        return
                    }
                }
            }
            else if (msg.slice(0, 4) == "멘티정보") {
                Menti = JSON.parse(FileStream.read(MentiAD))
                if (msg.length != 4 && msg.slice(4, 5) != " ") {
                    replier.reply("'멘티정보 이름'의 형식을 지켜 입력해주시기 바랍니다.")
                    return
                }
                msg = msg.slice(5)
                if (msg == "") {
                    msg = getOname(sender, false)
                    if (msg == -1) {
                        replier.reply("멘티로 등록되어있지 않습니다.")
                        return
                    }
                }
                else {
                    if (getName(msg, false) == -1) {
                        replier.reply(msg + "님은 멘티로 등록되어있지 않습니다.")
                        return
                    }
                }
                for (m in Menti) {
                    if (Menti[m]['oname'] == msg) {
                        var mm = Menti[m]
                        var s = "[정보]\n이름 : " + mm['oname'] + "\n참가되어 있는 멘토링 : "
                        for (mk in mm['mentoring']) {
                            for (mtk in Mentoring) {
                                if (Mentoring[mtk]['code'] == mm['mentoring'][mk]) {
                                    s += Mentoring[mtk]['name'] + ","
                                    break
                                }
                            }
                        }
                        replier.reply(s.slice(0, -1) + "\n구독하고 있는 멘토링수 : " + String(mm['auditing'].length))
                        return
                    }
                }
            }
            else if (msg.slice(0, 5) == "멘토링정보") {
                Mentoring = JSON.parse(FileStream.read(MentoringAD))
                if (msg.length != 5 && msg.slice(5, 6) != " ") {
                    replier.reply("'멘토링정보 이름'의 형식을 지켜 입력해주시기 바랍니다.")
                    return
                }
                msg = parseInt(msg.slice(6))
                for (m in Mentoring) {
                    if (Mentoring[m]['code'] == msg) {
                        var mm = Mentoring[m]
                        var s = ""
                        for (var k in mm['mento']) s += getOname(mm['mento'][k], true) + ","
                        s = s.slice(0, -1)
                        s += "\n수강하는 멘티 : "
                        for (var k in mm['menti']) s += getOname(mm['menti'][k], false) + ","
                        s = "[정보]\n이름 : " + mm['name'] + "\n담당 멘토 : " + s.slice(0, -1) + "\n청강 가능 여부 : " + mm['canAudit'] + "\n멘토링 코드 : " + String(mm['code']) + "\n구독자수 : " + String(mm['subscriber'].length) + "\n<일정>\n"
                        for (var k in mm['schedule']) {
                            if (mm['schedule'][k].length != 0) s += k + " " + mm['schedule'][k].join(",") + "\n"
                        }
                        replier.reply(s.slice(0, -1))
                        return
                    }
                }
                replier.reply("없는 멘토링입니다.")
            }
            else if (msg == "멘토링 코드확인" || msg == "멘토링코드 확인" || msg == "멘토링 코드 확인" || msg == "멘토링코드확인") {
                Mentoring = JSON.parse(FileStream.read(MentoringAD))
                var s = ""
                for (m in Mentoring) {
                    s += Mentoring[m]['name'] + " : " + String(Mentoring[m]['code']) + "\n"
                }
                replier.reply("[멘토링 코드 목록]" + gb + "\n" + s.slice(0, -1))
            }
            else if (msg == "일정확인" || msg == "일정 확인") {
                Menti = JSON.parse(FileStream.read(MentiAD))
                msg = getOname(sender, false)
                if (msg == -1) {
                    replier.reply("멘티로 등록되어있지 않습니다.")
                    return
                }
                for (m in Menti) {
                    if (Menti[m]['oname'] == msg) {
                        var s = "[일정]"
                        var mtr = Menti[m]['mentoring']
                        for (var kk in mtr) {
                            for (var mm in Mentoring) {
                                if (Mentoring[mm]['code'] == mtr[kk]) {
                                    s += "\n<" + Mentoring[mm]['name'] + ">\n"
                                    for (var k in Mentoring[mm]['schedule']) {
                                        if (Mentoring[mm]['schedule'][k].length != 0) s += k + " " + Mentoring[mm]['schedule'][k].join(",") + "\n"
                                    }
                                    break
                                }
                            }
                        }
                        replier.reply(s.slice(0, -1))
                        return
                    }
                }
            }
            else if (msg == "멘토등록" || msg == "멘토 등록") {
                Mento = JSON.parse(FileStream.read(MentoAD))
                Menti = JSON.parse(FileStream.read(MentiAD))
                for (m in Mento) {
                    if (Mento[m]['name'] == sender) {
                        replier.reply(getOname(sender, true) + "님은 이미 멘토입니다.")
                        return
                    }
                }
                for (m in Menti) {
                    if (Menti[m]['name'] == sender) {
                        replier.reply("성공적으로 등록되셨습니다.")
                        Mento.push({ "name": sender, "oname": Menti[m]['oname'], "mentoring": [] })
                        FileStream.write(MentoAD, JSON.stringify(Mento))
                        return
                    }
                }
                process[sender] = "멘토등록_이름"

                replier.reply("이름을 입력해주세요. (예시: 석인호)")
            }
            else if (msg == "멘티등록" || msg == "멘티 등록") {
                Mento = JSON.parse(FileStream.read(MentoAD))
                Menti = JSON.parse(FileStream.read(MentiAD))
                for (m in Menti) {
                    if (Menti[m]['name'] == sender) {
                        replier.reply(getOname(sender, false) + "님은 이미 멘티입니다.")
                        return
                    }
                }
                for (m in Mento) {
                    if (Mento[m]['name'] == sender) {
                        replier.reply("성공적으로 등록되셨습니다.")
                        Menti.push({ "name": sender, "oname": Mento[m]['oname'], "mentoring": [], "subscribe": [], "auditing": [] })
                        FileStream.write(MentiAD, JSON.stringify(Menti))
                        return
                    }
                }
                process[sender] = "멘티등록_이름"

                replier.reply("이름을 입력해주세요. (예시: 석인호)")
            }
            else if (msg == "멘토링등록" || msg == "멘토링 등록") {
                Mento = JSON.parse(FileStream.read(MentoAD))
                for (m in Mento) {
                    if (sender == Mento[m]['name']) {
                        process[sender] = "멘토링등록_이름"

                        replier.reply("멘토링 이름을 입력해주세요. (예시: 최강정멘)\n이름이 없다면 기본 형식인\n'xx와 xx의 xx멘토링'으로 입력해주세요.")
                        return
                    }
                }
                replier.reply("멘토에 등록되지 않았습니다.")
            }
            else if (msg == "멘토링참가" || msg == "멘토링 참가") {
                Menti = JSON.parse(FileStream.read(MentiAD))
                for (m in Menti) {
                    if (sender == Menti[m]['name']) {
                        replier.reply("멘토링 코드를 입력해주세요. (코드는 멘토에게 받거나 취소 후 '멘토링 코드확인'으로 확인할 수 있습니다.)")
                        process[sender] = "멘토링코드"

                        return
                    }
                }
                replier.reply("멘티로 등록되지 않았습니다. 멘토링에 참가하려면 멘티에 등록해주세요.")
                return
            }
            else if (msg == "청강신청" || msg == "청강 신청") {
                Menti = JSON.parse(FileStream.read(MentiAD))
                for (m in Menti) {
                    if (sender == Menti[m]['name']) {
                        replier.reply("멘토링 코드를 입력해주세요. (코드는 멘토에게 받거나 취소 후 '멘토링 코드확인'으로 확인할 수 있습니다.)")
                        process[sender] = "청강코드"
                        return
                    }
                }
                replier.reply("멘티로 등록되지 않았습니다. 멘토링에 참가하려면 멘티에 등록해주세요.")
                return
            }
            else if (msg == "멘토링관리" || msg == "멘토링관리") {
                Mentoring = JSON.parse(FileStream.read(MentoringAD))
                Mento = JSON.parse(FileStream.read(MentoAD))
                var flag = false
                for (m in Mento) {
                    if (Mento[m]['name'] == sender) {
                        flag = true
                        break
                    }
                }
                if (!flag) {
                    replier.reply("멘토에 등록되어있지 않습니다.")
                    return
                }
                mtis[sender] = []
                for (m in Mentoring) {
                    if (Mentoring[m]['mento'].indexOf(sender) != -1) {
                        mtis[sender].push(m)
                    }
                }
                if (mtis[sender].length == 0) {
                    replier.reply("아직 맡고있는 멘토링이 없습니다.")
                    return
                }
                if (mtis[sender].length == 1) {
                    var s = "하고 싶은 작업을 입력해주세요.\n1. 공지 등록\n2. 듣는 사람 숫자 확인\n"
                    if (Mentoring[mtis[sender][0]]['join'].length != 0) s += "3. 참가 승인 (!)\n"
                    else s += "3. 참가 승인\n"
                    if (Mentoring[mtis[sender][0]]['wantAudit'].length != 0) s += "4. 청강 승인 (!)"
                    else s += "4. 청강 승인"
                    s += "\n5. 멘토링 정보 수정"
                    replier.reply(s)
                    process[sender] = "관리번호번호"

                    idx[sender] = mtis[sender][0]
                    delete mtis[sender]
                    return
                }
                replier.reply("관리할 멘토링을 선택해주세요. (번호 입력)")
                var s = ""
                for (var i = 0; i < mtis[sender].length; i++) {
                    s += String(i + 1) + ". " + Mentoring[mtis[sender][i]]['name'] + "\n"
                }
                replier.reply(s.slice(0, -1))
                process[sender] = "관리번호"

            }
            else if (msg == "구독") {
                Menti = JSON.parse(FileStream.read(MentiAD))
                for (m in Menti) {
                    if (sender == Menti[m]['name']) {
                        replier.reply("멘토링 코드를 입력해주세요. (코드는 멘토에게 받거나 '멘토링 코드확인'으로 확인할 수 있습니다.)")
                        process[sender] = "구독코드"

                        return
                    }
                }
                replier.reply("멘티로 등록되지 않았습니다. 멘토링에 참가하려면 멘티에 등록해주세요.")
                return
            }
        }
        else {
            if (msg == "취소") {
                delete process[sender]

                replier.reply("취소되었습니다.")
                return
            }

            else if (process[sender] == "멘토등록_이름") {
                if (msg in EASEGG) {
                    replier.reply(msg + " : " + EASEGG[msg][0])
                    return
                }
                if (!(msg in name_num)) {
                    replier.reply(msg + "님은 데이터베이스에 없습니다.")
                    return
                }
                process[sender] = "멘토등록_번호_" + msg

                replier.reply("학번을 입력해주세요. (예시: 20-056)")
            }
            else if (process[sender].slice(0, 7) == "멘토등록_번호") {
                Mento = JSON.parse(FileStream.read(MentoAD))
                if (msg.indexOf("-") == -1) {
                    replier.reply("xx-xxx 형식으로 입력해주세요. (예시: 20-056)")
                    return
                }
                var nm = process[sender].split("_")[2]
                if (name_num[nm].indexOf(msg) == -1) {
                    replier.reply("이름과 번호가 일치하지 않습니다.\n입력된 이름: " + nm + "\n입력된 번호: " + msg)
                    return
                }
                var flag = false
                for (m in Mento) {
                    if (Mento[m]['name'] == sender) {
                        replier.reply("카톡 이름이 같은 등록자가 있습니다. 20-056 석인호에게 연락해주세요.")
                        delete process[sender]

                        return
                    }
                }
                if (name_num[nm].length != 1) {
                    replier.reply("동명이인이 존재합니다. 이름이 " + msg + nm + "으로 변경됩니다.")
                    Mento.push({ "name": sender, "oname": msg + nm, "mentoring": [] })
                }
                else Mento.push({ "name": sender, "oname": nm, "mentoring": [] })
                delete process[sender]

                replier.reply("성공적으로 등록되셨습니다.")
                FileStream.write(MentoAD, JSON.stringify(Mento))
            }

            else if (process[sender] == "멘티등록_이름") {
                if (msg in EASEGG) {
                    replier.reply(msg + " : " + EASEGG[msg][1])
                    return
                }
                if (!(msg in name_num)) {
                    replier.reply(msg + "님은 데이터베이스에 없습니다.")
                    return
                }
                process[sender] = "멘티등록_번호_" + msg

                replier.reply("학번을 입력해주세요. (예시: 20-056)")
            }
            else if (process[sender].slice(0, 7) == "멘티등록_번호") {
                Menti = JSON.parse(FileStream.read(MentiAD))
                if (msg.indexOf("-") == -1) {
                    replier.reply("xx-xxx 형식으로 입력해주세요. (예시: 20-056)")
                    return
                }
                var nm = process[sender].split("_")[2]
                if (name_num[nm].indexOf(msg) == -1) {
                    replier.reply("이름과 번호가 일치하지 않습니다.\n입력된 이름: " + nm + "\n입력된 번호: " + msg)
                    return
                }
                var flag = false
                for (m in Menti) {
                    if (Menti[m]['name'] == sender) {
                        replier.reply("카톡 이름이 같은 등록자가 있습니다. 20-056 석인호에게 연락해주세요.")
                        delete process[sender]

                        return
                    }
                }
                if (name_num[nm].length != 1) {
                    replier.reply("동명이인이 존재합니다. 이름이 " + msg + nm + "으로 변경됩니다.")
                    Mento.push({ "name": sender, "oname": msg + nm, "mentoring": [], "subscribe": [], "auditing": [] })
                }
                else Menti.push({ "name": sender, "oname": nm, "mentoring": [], "subscribe": [], "auditing": [] })
                delete process[sender]

                replier.reply("성공적으로 등록되셨습니다.")
                FileStream.write(MentiAD, JSON.stringify(Menti))
            }

            else if (process[sender] == "멘토링등록_이름") {
                process[sender] = "멘토링등록_멘토"
                nam[sender] = msg
                replier.reply("다음 규칙에 맞춰 멘토 이름을 입력해주세요. (예시: 석인호,김동은)")
                replier.reply("규칙\n1. 멘토는 모두 등록되어있어야 합니다.\n2. 공백 없이 쉼표로 구분하여 입력해주세요.\n3. 만약 멘토 중 동명이인이 있다면 다음과 같이 입력해주세요. (20-056석인호)")
            }
            else if (process[sender] == "멘토링등록_멘토") {
                Mento = JSON.parse(FileStream.read(MentoAD))
                if (msg.indexOf(" ") != -1) {
                    replier.reply("공백 없이 입력해주세요.")
                    return
                }
                msg = msg.split(",")
                mto[sender] = []
                var ff = false
                for (men in msg) {
                    flag = false
                    for (m in Mento) {
                        if (Mento[m]['oname'] == msg[men]) {
                            flag = true
                            mto[sender].push(Mento[m]['name'])
                        }
                        if (Mento[m]['oname'] == msg[men]) ff = true
                    }
                    if (!flag) {
                        replier.reply("등록되지 않은 멘토가 있습니다: " + msg[men] + "\n멘토등록을 한 후 다시 시도해주세요.")
                        delete process[sender]
                        return
                    }
                }
                if (!ff) {
                    replier.reply("본인이 속하지 않은 멘토링은 만들 수 없습니다.")
                    delete process[sender]
                    return
                }
                process[sender] = "멘토링등록_청강"

                replier.reply("멘토링 청강 가능 여부를 입력해주세요. (청강: 이 멘토링을 듣지 않는 멘티가 신청해 멘토링을 들을 수 있게 해 주는 제도)")
                replier.reply("가능: 신청 없이 누구나 청강 가능\n조건: 청강 신청이 들어올 때 허용 여부를 멘토가 결정\n불가능: 청강 신청을 할 수 없음")
                replier.reply("언제든 변경 가능하니, 부담감 없이 적어 주세요.")
            }
            else if (process[sender] == "멘토링등록_청강") {
                if (["가능", "조건", "불가능"].indexOf(msg) == -1) {
                    replier.reply("'가능', '조건', '불가능' 중 하나로 입력해주세요.")
                    return
                }
                aut[sender] = msg
                process[sender] = "멘토링등록_일정"
                replier.reply("다음 규칙에 맞춰 멘토링 일정을 입력해주세요. (예시: 토(13:30~15:30))")
                replier.reply("규칙\n1. 형식은 요일(시간~시간)으로 하며, 시간은 24시간제를 사용한다.\n2. 요일은 월, 화, 수, 목, 금, 토, 일 중 하나를 사용하며, 같은 요일에 두 번 이상 멘토링이 있는 경우 월(9:00~10:00),월(15:00~16:00)과 같이 입력한다.\n3. 각 시간은 공백 없이 쉼표로 연결하여 입력한다.")
            }
            else if (process[sender] == "멘토링등록_일정") {
                Mentoring = JSON.parse(FileStream.read(MentoringAD))
                Mento = JSON.parse(FileStream.read(MentoAD))
                msg = msg.split(",")
                scedu = { "월": [], "화": [], "수": [], "목": [], "금": [], "토": [], "일": [] }
                for (sc in msg) {
                    if (week.indexOf(msg[sc].split("(")[0]) == -1) {
                        replier.reply("요일은 월, 화, 수, 목, 금, 토, 일 중 하나로 입력하여야 합니다.\n잘못된 입력: " + msg[sc].split("(")[0])
                        return
                    }
                    if (msg[sc].split("(")[0].length != 1 || msg[sc].slice(1, 2) != "(" || msg[sc].slice(-1) != ")") {
                        replier.reply("형식은 요일(시간~시간) 형식으로 입력하여야 합니다. (예시: 월(13:00~14:00))\n잘못된 입력: " + msg[sc])
                        return
                    }
                    var sce = msg[sc].slice(2, -1).split(":")
                    if (sce.length != 3 || isNaN(sce[0]) || isNaN(sce[2])) {
                        replier.reply("시간은 (시간~시간) 형식으로 입력하여야 합니다. (예시: (13:00~14:00))\n잘못된 입력: " + msg[sc])
                        return
                    }
                    var sced = sce[1].split("~")
                    if (sced.length != 2 || isNaN(sced[0]) || isNaN(sced[1])) {
                        replier.reply("시간은 (시간~시간) 형식으로 입력하여야 합니다. (예시: (13:00~14:00))\n잘못된 입력: " + msg[sc])
                        return
                    }
                    var sss = msg[sc].slice(2, -1).split("~")
                    if (compareTime(sss) == 0) {
                        replier.reply("비정상적인 입력입니다.\n잘못된 입력: " + msg[sc])
                        return
                    }
                    scedu[msg[sc].slice(0, 1)].push(msg[sc].slice(2, -1))
                }
                while (1) {
                    var ra = Math.floor(Math.random() * 100)
                    var flag = false
                    for (m in Mentoring) {
                        if (ra == Mentoring[m]["code"]) {
                            flag = true
                            break
                        }
                    }
                    if (flag) continue
                    break
                }
                Mentoring.push({ "name": nam[sender], "mento": mto[sender], "menti": [], "code": ra, "audit": [], "wantAudit": [], "canAudit": aut[sender], "schedule": scedu, "join": [], "subscriber": [] })
                replier.reply("멘토링이 성공적으로 개설되었습니다.\n멘토링 코드 : " + ra)
                for (m in mto[sender]) {
                    for (mm in Mento) {
                        if (Mento[mm]['name'] == mto[sender][m]) {
                            Mento[mm]['mentoring'].push(ra)
                            break
                        }
                    }
                }
                delete process[sender]
                delete aut[sender]
                delete mto[sender]
                delete nam[sender]
                FileStream.write(MentoringAD, JSON.stringify(Mentoring))
                FileStream.write(MentoAD, JSON.stringify(Mento))

            }

            else if (process[sender] == "멘토링코드") {
                Mentoring = JSON.parse(FileStream.read(MentoringAD))
                for (m in Mentoring) {
                    if (Mentoring[m]['code'] == msg) {
                        replier.reply("멘토링 '" + Mentoring[m]['name'] + "'이 맞습니까? (예, 아니오)")
                        process[sender] = "멘토링코드확인_" + msg
                        return
                    }
                }
                replier.reply("멘토링이 존재하지 않습니다. 코드를 다시 확인해주세요.")
                return
            }
            else if (process[sender].slice(0, 8) == "멘토링코드확인_") {
                if (msg == "예" || msg == "y" || msg == "Y" || msg == "네" || msg == "ㅇ") {
                    msg = process[sender].slice(8)
                    Mentoring = JSON.parse(FileStream.read(MentoringAD))
                    Menti = JSON.parse(FileStream.read(MentiAD))
                    for (m in Mentoring) {
                        if (Mentoring[m]['code'] == msg) {
                            for (mm in Menti) {
                                if (Menti[mm]['name'] == sender) {
                                    if (Menti[mm]['mentoring'].indexOf(Mentoring[m]['code']) != -1) {
                                        replier.reply("이미 이 멘토링에 참가하고 있습니다.")
                                        delete process[sender]

                                        return
                                    }
                                    replier.reply("멘토링 참가 신청이 완료되었습니다.")
                                    replier.reply("신청이 수락되면 카톡으로 알려드립니다.")
                                    Mentoring[m]['join'].push(Menti[mm]['name'])
                                    for (mt in Mentoring[m]['mento']) {
                                        replier.reply(Mentoring[m]['mento'][mt], "멘토링 참가 신청이 들어왔습니다.\n>" + Mentoring[m]['name'])
                                    }
                                    delete process[sender]

                                    FileStream.write(MentoringAD, JSON.stringify(Mentoring))
                                    return
                                }
                            }
                            return
                        }
                    }
                    replier.reply("멘토링이 존재하지 않습니다. 코드를 다시 확인해주세요.")
                    return
                } else if (msg == "아니오" || msg == "n" || msg == "N" || msg == "놉" || msg == "ㄴ") {
                    replier.reply("취소되었습니다.")
                    delete process[sender]

                    return
                }
                replier.reply("예, 아니오로만 대답해주세요.")
            }

            else if (process[sender] == "구독코드") {
                Mentoring = JSON.parse(FileStream.read(MentoringAD))
                Menti = JSON.parse(FileStream.read(MentiAD))
                for (m in Mentoring) {
                    if (Mentoring[m]['code'] == msg) {
                        for (mm in Menti) {
                            if (Menti[mm]['name'] == sender) {
                                if (Menti[mm]['mentoring'].indexOf(Mentoring[m]['code']) != -1) {
                                    replier.reply("이미 이 멘토링에 참가하고 있어 구독할 수 없습니다.")
                                    delete process[sender]
                                    return
                                }
                                if (Mentoring[m]['name'] in Menti[mm]['subscribe']) {
                                    replier.reply("구독이 취소되었습니다.")
                                    delete Menti[mm]['subscribe'][Menti[mm]['subscribe'].indexOf(Mentoring[m]['name'])]
                                    delete Mentoring[m]['subscriber'][Mentoring[m]['subscriber'].indexOf(Menti[mm]['name'])]
                                    delete process[sender]
                                    FileStream.write(MentoringAD, JSON.stringify(Mentoring))
                                    FileStream.write(MentiAD, JSON.stringify(Menti))
                                    return
                                }
                                else {
                                    replier.reply("구독이 완료되었습니다.")
                                    Menti[mm]['subscribe'].push(Mentoring[m]['name'])
                                    Mentoring[m]['subscriber'].push(Menti[mm]['name'])
                                    delete process[sender]
                                    FileStream.write(MentoringAD, JSON.stringify(Mentoring))
                                    FileStream.write(MentiAD, JSON.stringify(Menti))
                                    return
                                }
                            }
                        }
                        return
                    }
                }
                replier.reply("멘토링이 존재하지 않습니다. 코드를 다시 확인해주세요.")
                return
            }

            else if (process[sender] == "청강코드") {
                Mentoring = JSON.parse(FileStream.read(MentoringAD))
                Menti = JSON.parse(FileStream.read(MentiAD))
                var nm = process[sender].slice(5)
                for (m in Mentoring) {
                    if (Mentoring[m]['code'] == msg) {
                        if (Mentoring[m]['canAudit'] == "불가능") {
                            replier.reply("이 멘토링은 청강신청이 불가능합니다.")
                            delete process[sender]
                            return
                        }
                        for (mm in Menti) {
                            if (Menti[mm]['name'] == sender) {
                                if (Mentoring[m]['wantAudit'].indexOf(Menti[mm]['name']) != -1) {
                                    replier.reply("이미 이 멘토링에 청강신청이 되어있습니다.")
                                    delete process[sender]
                                    return
                                }
                                if (Menti[mm]['audit'].indexOf(Mentoring[m]['name']) != -1) {
                                    replier.reply("이미 이 멘토링에 청강이 예약되어있습니다.")
                                    delete process[sender]
                                    return
                                }
                                if (Menti[mm]['mentoring'].indexOf(Mentoring[m]['code']) != -1) {
                                    replier.reply("멘토링에 참가하고 있는 학생은 청강신청을 할 수 없습니다.")
                                    delete process[sender]
                                    return
                                }
                                if (Mentoring[m]['canAudit'] == "가능") {
                                    replier.reply("청강 목록에 추가되셨습니다.")
                                    Mentoring[m]['audit'].push(Menti[mm]['name'])
                                    delete process[sender]
                                    FileStream.write(MentoringAD, JSON.stringify(Mentoring))
                                    return
                                }
                                replier.reply("청강 신청이 완료되었습니다.")
                                replier.reply("신청이 수락되면 카톡으로 알려드립니다.")
                                Mentoring[m]['wantAudit'].push(Menti[mm]['name'])
                                for (mt in Mentoring[m]['mento']) {
                                    replier.reply(Mentoring[m]['mento'][mt], "멘토링 청강 신청이 들어왔습니다.\n>" + Mentoring[m]['name'])
                                }
                                delete process[sender]
                                FileStream.write(MentoringAD, JSON.stringify(Mentoring))
                                return
                            }
                        }
                        return
                    }
                }
                replier.reply("멘토링이 존재하지 않습니다. 코드를 다시 확인해주세요.")
                return
            }

            else if (process[sender] == "관리번호") {
                Mentoring = JSON.parse(FileStream.read(MentoringAD))
                if (isNaN(msg)) {
                    replier.reply("1~" + mtis[sender].length + "중 하나를 선택해주세요.")
                    return
                }
                msg = parseInt(msg) - 1
                var s = "하고 싶은 작업을 입력해주세요.\n1. 공지 등록\n2. 듣는 사람 숫자 확인\n"
                if (Mentoring[mtis[sender][parseInt(msg)]]['join'].length != 0) s += "3. 참가 승인 (!)\n"
                else s += "3. 참가 승인\n"
                if (Mentoring[mtis[sender][parseInt(msg)]]['wantAudit'].length != 0) s += "4. 청강 승인 (!)"
                else s += "4. 청강 승인"
                s += "\n5. 멘토링 정보 수정"
                replier.reply(s)
                process[sender] = "관리번호번호"
                idx[sender] = mtis[sender][parseInt(msg)]
                delete mtis[sender]
            }

            else if (process[sender] == "관리번호번호") {
                Mentoring = JSON.parse(FileStream.read(MentoringAD))
                if (isNaN(msg)) {
                    replier.reply("1~5중 하나를 선택해주세요.")
                    return
                }
                msg = parseInt(msg)
                switch (msg) {
                    case 1:
                        replier.reply("공지를 입력해주세요.")
                        process[sender] = "공지등록"

                        break
                    case 2:
                        replier.reply(String(Mentoring[idx[sender]]["menti"].length + Mentoring[idx[sender]]["audit"].length) + "명 수강 예정입니다.")
                        delete process[sender]
                        break
                    case 3:
                        if (Mentoring[idx[sender]]["join"].length == 0) {
                            replier.reply("멘토링에 참가하고자 하는 학생이 없습니다.")
                            return
                        }
                        var s = ""
                        ad[sender] = {}
                        for (m in Mentoring[idx[sender]]["join"]) {
                            ad[sender][getOname(Mentoring[idx[sender]]["join"][m], false)] = true
                        }
                        for (var aa in ad[sender]) s += ad[sender][aa] + " (승인)\n"
                        replier.reply("목록\n" + s.slice(0, -1))
                        replier.reply("1. 토글 이름으로 승인/거부를 바꿀 수 있습니다. (예시: 토글 석인호)\n2. 모두승인, 모두거부로 전체 승인, 전체 거부를 할 수 있습니다.\n3. 확정으로 학생들을 승인/거부할 수 있습니다.")
                        process[sender] = "참가승거"
                        break
                    case 4:
                        if (Mentoring[idx[sender]]["wantAudit"].length == 0) {
                            replier.reply("멘토링을 청강하고자 하는 학생이 없습니다.")
                            delete process[sender]
                            return
                        }
                        var s = ""
                        ad[sender] = {}
                        for (m in Mentoring[idx[sender]]["wantAudit"]) {
                            ad[sender][getOname(Mentoring[idx[sender]]["wantAudit"][m], false)] = true
                        }
                        for (var aa in ad[sender]) s += ad[sender][aa] + " (승인)\n"
                        replier.reply("목록\n" + s.slice(0, -1))
                        replier.reply("1. 토글 이름으로 승인/거부를 바꿀 수 있습니다. (예시: 토글 석인호)\n2. 모두승인, 모두거부로 전체 승인, 전체 거부를 할 수 있습니다.\n3. 확정으로 학생들을 승인/거부할 수 있습니다.")
                        process[sender] = "청강승거"

                        break
                    case 5:
                        replier.reply("수정하고 싶은 정보를 선택해주세요.\n1. 멘토링 이름\n2. 청강 가능 여부\n3. 멘토링 일정")
                        process[sender] = "멘토링수정"
                        break
                    default:
                        replier.reply("1~6중 하나를 선택해주세요.")
                }
            }

            else if (process[sender] == "멘토링수정") {
                if (isNaN(msg)) {
                    replier.reply("1~3중 하나를 선택해주세요.")
                    return
                }
                msg = parseInt(msg)
                switch (msg) {
                    case 1:
                        replier.reply("수정할 이름을 입력해주세요.")
                        process[sender] = "멘토링수정_이름"
                        break
                    case 2:
                        replier.reply("멘토링 청강 가능 여부를 입력해주세요. (청강: 이 멘토링을 듣지 않는 멘티가 신청해 멘토링을 들을 수 있게 해 주는 제도)")
                        replier.reply("가능: 신청 없이 누구나 청강 가능\n조건: 청강 신청이 들어올 때 허용 여부를 멘토가 결정\n불가능: 청강 신청을 할 수 없음")
                        replier.reply("언제든 변경 가능하니, 부담감 없이 적어 주세요.")
                        process[sender] = "멘토링수정_청강"
                        break
                    case 3:
                        replier.reply("규칙에 맞게 명령어를 입력해주세요.")
                        replier.reply("규칙1\n1. 추가 요일(시간~시간),요일(시간~시간),...로 일정을 추가할 수 있다.\n2. 삭제 요일(시간~시간),요일(시간~시간),...로 기존 일정을 삭제할 수 있다. 여기서 기존 일정은 변경 전 일정으로, 적용되지 않은 일정은 삭제할 수 없다.\n3. 확정으로 변경된 일정을 적용할 수 있다.")
                        replier.reply("규칙2\n1. 형식은 요일(시간~시간)으로 하며, 시간은 24시간제를 사용한다.\n2. 요일은 월, 화, 수, 목, 금, 토, 일 중 하나를 사용하며, 같은 요일에 두 번 이상 멘토링이 있는 경우 월(9:00~10:00),월(15:00~16:00)과 같이 입력한다.\n3. 각 시간은 공백 없이 쉼표로 연결하여 입력한다.")
                        replier.reply("쉼표로 구분하여 한 번에 여러 개를 동시에 등록하거나 삭제할 수 있습니다.")
                        process[sender] = "멘토링수정_일정"
                        Mentoring = JSON.parse(FileStream.read(MentoringAD))
                        scedu = Mentoring[idx[sender]]['schedule']
                        break
                    default:
                        replier.reply("1~3중 하나를 선택해주세요.")
                }
            }

            else if (process[sender] == "멘토링수정_이름") {
                Mentoring = JSON.parse(FileStream.read(MentoringAD))
                Mentoring[idx[sender]]['name'] = msg
                replier.reply("수정되었습니다.")
                delete process[sender]
                FileStream.write(MentoringAD, JSON.stringify(Mentoring))
                return
            }

            else if (process[sender] == "멘토링수정_청강") {
                if (["가능", "조건", "불가능"].indexOf(msg) == -1) {
                    replier.reply("'가능', '조건', '불가능' 중 하나로 입력해주세요.")
                    return
                }
                Mentoring = JSON.parse(FileStream.read(MentoringAD))
                Mentoring[idx[sender]]['canAudit'] = msg
                delete process[sender]
                FileStream.write(MentoringAD, JSON.stringify(Mentoring))

                return
            }

            else if (process[sender] == "멘토링수정_일정") {
                if (msg.slice(0, 3) == "추가 ") {
                    msg = msg.slice(3).split(",")
                    for (sc in msg) {
                        if (week.indexOf(msg[sc].split("(")[0]) == -1) {
                            replier.reply("요일은 월, 화, 수, 목, 금, 토, 일 중 하나로 입력하여야 합니다.\n잘못된 입력: " + msg[sc].split("(")[0])
                            return
                        }
                        if (msg[sc].split("(")[0].length != 1 || msg[sc].slice(1, 2) != "(" || msg[sc].slice(-1) != ")") {
                            replier.reply("형식은 요일(시간~시간) 형식으로 입력하여야 합니다. (예시: 월(13:00~14:00))\n잘못된 입력: " + msg[sc])
                            return
                        }
                        var sce = msg[sc].slice(2, -1).split(":")
                        if (sce.length != 3 || isNaN(sce[0]) || isNaN(sce[2])) {
                            replier.reply("시간은 (시간~시간) 형식으로 입력하여야 합니다. (예시: (13:00~14:00))\n잘못된 입력: " + msg[sc])
                            return
                        }
                        var sced = sce[1].split("~")
                        if (sced.length != 2 || isNaN(sced[0]) || isNaN(sced[1])) {
                            replier.reply("시간은 (시간~시간) 형식으로 입력하여야 합니다. (예시: (13:00~14:00))\n잘못된 입력: " + msg[sc])
                            return
                        }
                        scedu[msg[sc].slice(0, 1)].push(msg[sc].slice(2, -1))
                    }
                    var s = "[일정]\n"
                    for (var ss in scedu) {
                        if (scedu[ss].length != 0) s += ss + " " + scedu[ss].join(",") + "\n"
                    }
                    replier.reply(s.slice(0, -1))
                }
                else if (msg.slice(0, 3) == "삭제 ") {
                    msg = msg.slice(3).split(",")
                    for (sc in msg) {
                        if (week.indexOf(msg[sc].split("(")[0]) == -1) {
                            replier.reply("요일은 월, 화, 수, 목, 금, 토, 일 중 하나로 입력하여야 합니다.\n잘못된 입력: " + msg[sc].split("(")[0])
                            return
                        }
                        if (msg[sc].split("(")[0].length != 1 || msg[sc].slice(1, 2) != "(" || msg[sc].slice(-1) != ")") {
                            replier.reply("형식은 요일(시간~시간) 형식으로 입력하여야 합니다. (예시: 월(13:00~14:00))\n잘못된 입력: " + msg[sc])
                            return
                        }
                        var sce = msg[sc].slice(2, -1).split(":")
                        if (sce.length != 3 || isNaN(sce[0]) || isNaN(sce[2])) {
                            replier.reply("시간은 (시간~시간) 형식으로 입력하여야 합니다. (예시: (13:00~14:00))\n잘못된 입력: " + msg[sc])
                            return
                        }
                        var sced = sce[1].split("~")
                        if (sced.length != 2 || isNaN(sced[0]) || isNaN(sced[1])) {
                            replier.reply("시간은 (시간~시간) 형식으로 입력하여야 합니다. (예시: (13:00~14:00))\n잘못된 입력: " + msg[sc])
                            return
                        }
                        var iiii = scedu[msg[sc].slice(0, 1)].indexOf(msg[sc].slice(2, -1))
                        if (iiii != -1) delete scedu[msg[sc].slice(0, 1)][iiii]
                        else replier.reply(sc + "는 일정에 등록되어있지 않습니다.")
                    }
                    var s = "[일정]\n"
                    for (var ss in scedu) {
                        if (scedu[ss].length != 0) s += ss + " " + scedu[ss].join(",") + "\n"
                    }
                    replier.reply(s.slice(0, -1))
                }
                else if (msg == "확정") {
                    Mentoring = JSON.parse(FileStream.read(MentoringAD))
                    Mentoring[idx[sender]]['schedule'] = scedu
                    FileStream.write(MentoringAD, JSON.stringify(Mentoring))
                    replier.reply("시간표가 변경되었습니다.")
                }
                else {
                    replier.reply("규칙에 맞게 명령어를 입력해주세요.")
                    replier.reply("규칙1\n1. 추가 요일(시간~시간),요일(시간~시간),...로 일정을 추가할 수 있다.\n2. 삭제 요일(시간~시간),요일(시간~시간),...로 기존 일정을 삭제할 수 있다. 여기서 기존 일정은 변경 전 일정으로, 적용되지 않은 일정은 삭제할 수 없다.\n3. 확정으로 변경된 일정을 적용할 수 있다.")
                    replier.reply("규칙2\n1. 형식은 요일(시간~시간)으로 하며, 시간은 24시간제를 사용한다.\n2. 요일은 월, 화, 수, 목, 금, 토, 일 중 하나를 사용하며, 같은 요일에 두 번 이상 멘토링이 있는 경우 월(9:00~10:00),월(15:00~16:00)과 같이 입력한다.\n3. 각 시간은 공백 없이 쉼표로 연결하여 입력한다.")
                    replier.reply("쉼표로 구분하여 한 번에 여러 개를 동시에 등록하거나 삭제할 수 있습니다.")
                }
                return
            }

            else if (process[sender] == "공지등록") {
                Mentoring = JSON.parse(FileStream.read(MentoringAD))
                for (m in Mentoring[idx[sender]]["mento"]) replier.reply(Mentoring[idx[sender]]["mento"][m], "멘토 " + getOname(sender, true) + ": " + msg)
                for (m in Mentoring[idx[sender]]["menti"]) replier.reply(Mentoring[idx[sender]]["menti"][m], "멘토 " + getOname(sender, false) + ": " + msg)
                replier.reply("공지를 발송했습니다.")
                delete process[sender]

            }
            else if (process[sender] == "참가승거") {

                Mentoring = JSON.parse(FileStream.read(MentoringAD))
                Menti = JSON.parse(FileStream.read(MentiAD))
                var s = ""
                if (msg == "모두승인") for (m in ad[sender]) ad[sender][m] = true
                else if (msg == "모두거부") for (m in ad[sender]) ad[sender][m] = false
                else if (msg.slice(0, 3) == "토글 ") {
                    nm = msg.slice(3)
                    if (nm in ad[sender]) ad[sender][nm] = !ad[sender][nm]
                    else replier.reply(nm + "은(는) 없는 신청자입니다.")
                }
                else if (msg == "확정") {
                    var flag = false
                    s = ""
                    for (m in ad[sender]) {
                        for (mm in Menti) {
                            if (Menti[mm]['oname'] == m) {
                                if (ad[sender][m]) {
                                    replier.reply(Menti[mm]['name'], "멘토링 '" + Mentoring[idx[sender]]["name"] + "'에 참가되셨습니다.")
                                    Menti[mm]['mentoring'].push(Mentoring[idx[sender]]['code'])
                                    Mentoring[idx[sender]]["menti"].push(Menti[mm]['name'])
                                    var aa = Mentoring[idx[sender]]['audit'].indexOf(Menti[mm]['name'])
                                    if (aa != -1) {
                                        delete Mentoring[idx[sender]]['audit'][aa]
                                        delete Menti[mm]['audit'][Menti[mm]['audit'].indexOf(Mentoring[idx[sender]]['name'])]
                                    }
                                    s += Menti[mm]['oname'] + ","
                                    flag = true
                                    break
                                } else {
                                    replier.reply(Menti[mm]['name'], "멘토링 '" + Mentoring[idx[sender]]["name"] + "'의 참가가 거절되셨습니다.")
                                    break
                                }
                            }
                        }
                    }
                    if (!flag) replier.reply("멘토링에 추가로 참가한 학생이 없습니다.")
                    else replier.reply(s.slice(0, -1) + "이(가) 멘토링에 참가하셨습니다.")
                    delete process[sender]

                    Mentoring[idx[sender]]['join'] = []
                    FileStream.write(MentoringAD, JSON.stringify(Mentoring))
                    FileStream.write(MentiAD, JSON.stringify(Menti))

                    return
                }
                else {
                    replier.reply("없는 명령어입니다.")
                    return
                }
                for (m in ad[sender]) s += m + " (" + (ad[sender][m] ? "승인" : "거부") + ")\n"
                replier.reply("목록\n" + s.slice(0, -1))

            }
            else if (process[sender] == "청강승거") {

                Mentoring = JSON.parse(FileStream.read(MentoringAD))
                Menti = JSON.parse(FileStream.read(MentiAD))
                if (msg == "모두승인") for (m in ad[sender]) ad[sender][m] = true
                else if (msg == "모두거부") for (m in ad[sender]) ad[sender][m] = false
                else if (msg.slice(0, 3) == "토글 ") {
                    nm = msg.slice(3)
                    if (nm in ad[sender]) ad[sender][nm] = !ad[sender][nm]
                    else replier.reply(nm + "은(는) 없는 신청자입니다.")
                }
                else if (msg == "확정") {
                    var s = ""
                    var flag = false
                    for (m in ad[sender]) {
                        for (mm in Menti) {
                            if (Menti[mm]['oname'] == m) {
                                if (ad[sender][m]) {
                                    replier.reply(Menti[mm]['name'], "멘토링 '" + Mentoring[idx[sender]]["name"] + "'의 청강신청이 수락되셨습니다.")
                                    Menti[mm]['audit'].push(Mentoring[idx[sender]]['name'])
                                    Mentoring[idx[sender]]["audit"].push(Menti[mm]['name'])
                                    s += m + ","
                                    flag = true
                                    break
                                } else {
                                    replier.reply(Menti[mm]['name'], "멘토링 '" + Mentoring[idx[sender]]["name"] + "'의 청강신청이 거절되셨습니다.")
                                    break
                                }
                            }
                        }
                    }
                    if (!flag) replier.reply("청강목록에 추가된 학생이 없습니다.")
                    else replier.reply(s.slice(0, -1) + "이(가) 청강목록에 추가되셨습니다.")
                    delete process[sender]

                    delete ad[sender]
                    Mentoring[idx[sender]]['wantAudit'] = []
                    FileStream.write(MentoringAD, JSON.stringify(Mentoring))
                    FileStream.write(MentiAD, JSON.stringify(Menti))
                    return
                }
                else {
                    replier.reply("없는 명령어입니다.")
                    return
                }
                for (m in ad[sender]) s += m + " (" + (ad[sender][m] ? "승인" : "거부") + ")\n"
                replier.reply("목록\n" + s.slice(0, -1))
            }
        }
    }
}